Question:
Given an unsorted array arr[] of size n, containing elements from the range 1 to n, it is known that one number in this range is missing, and another number occurs twice in the array, find both the duplicate number and the missing number.

Examples:

Input: arr[] = [2, 2]
Output: [2, 1]
Explanation: Repeating number is 2 and the missing number is 1.
Input: arr[] = [1, 3, 3] 
Output: [3, 2]
Explanation: Repeating number is 3 and the missing number is 2.
Input: arr[] = [4, 3, 6, 2, 1, 1]
Output: [1, 5]
Explanation: Repeating number is 1 and the missing number is 5.

Solution:
class Solution {
    ArrayList<Integer> findTwoElement(int arr[]) {
        // code here
        int n = arr.length;
        
        long S_n = (long) n * (n + 1) / 2;
        long Sq_n = (long) n * (n + 1) * (2L * n + 1) / 6;
        
        long S = 0, Sq = 0;
        for (int val : arr) {
            S += val;
            Sq += (long) val * val;
        }
        long diff = S - S_n;
        long sqDiff = Sq - Sq_n;
        long sum = sqDiff / diff;
        int duplicate = (int) ((diff + sum) / 2);
        int missing = (int) (duplicate - diff);
        
        ArrayList <Integer> result = new ArrayList<>();
        result.add(duplicate);
        result.add(missing);
        return result;
    }
}
